package college;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import com.google.gson.Gson;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

@WebServlet("/deleteEvent")
public class DeleteEvent extends HttpServlet {
    private static final long serialVersionUID = 1L;

    // JDBC connection parameters
    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/user_management";
    private static final String JDBC_USER = "root";
    private static final String JDBC_PASS = "root";

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {

        // Set response type to JSON
        response.setContentType("application/json");
        PrintWriter out = response.getWriter();
        Gson gson = new Gson();

        // Parse event ID from the request
        String eventIdStr = request.getParameter("eventId");

        // Validate input
        if (eventIdStr == null || eventIdStr.trim().isEmpty()) {
            out.write(gson.toJson(new Response(false, "Event ID cannot be empty")));
            return;
        }

        int eventId;
        try {
            eventId = Integer.parseInt(eventIdStr); // Convert eventId to an integer
        } catch (NumberFormatException e) {
            out.write(gson.toJson(new Response(false, "Invalid Event ID format")));
            return;
        }

        try {
            // Load MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            log("MySQL JDBC Driver not found", e);
            out.write(gson.toJson(new Response(false, "Internal server error: Driver not found")));
            return;
        }

        // Delete event from the database
        try (Connection connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASS);
             PreparedStatement statement = connection.prepareStatement(
                     "DELETE FROM events WHERE id = ?")) {

            // Set parameters for the SQL statement
            statement.setInt(1, eventId);

            // Execute the update
            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                out.write(gson.toJson(new Response(true, "Event deleted successfully")));
            } else {
                out.write(gson.toJson(new Response(false, "Event not found")));
            }

        } catch (SQLException e) {
            log("Database error", e);
            out.write(gson.toJson(new Response(false, "Database error: " + e.getMessage())));
        }
    }

    // Response class for structured JSON output
    private static class Response {
        private final boolean success;
        private final String message;

        public Response(boolean success, String message) {
            this.success = success;
            this.message = message;
        }

        public boolean isSuccess() {
            return success;
        }

        public String getMessage() {
            return message;
        }
    }
}
